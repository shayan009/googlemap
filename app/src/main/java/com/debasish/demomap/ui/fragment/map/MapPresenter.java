package com.debasish.demomap.ui.fragment.map;import android.location.Address;import android.location.Location;import android.support.annotation.NonNull;import android.util.Log;import com.debasish.demomap.app.MainApp;import com.google.android.gms.location.LocationRequest;import com.google.android.gms.location.LocationSettingsResponse;import com.google.android.gms.location.LocationSettingsStates;import com.google.android.gms.tasks.OnCompleteListener;import com.google.android.gms.tasks.Task;import com.rp.basefiles.BasePresenter;import io.reactivex.MaybeObserver;import io.reactivex.Observer;import io.reactivex.Scheduler;import io.reactivex.Single;import io.reactivex.SingleObserver;import io.reactivex.disposables.CompositeDisposable;import io.reactivex.disposables.Disposable;public class MapPresenter<V extends MapMVP.IView> extends BasePresenter<V>        implements MapMVP.IPresenter<V> {    private static final String TAG = MapPresenter.class.getSimpleName();    CompositeDisposable disposable;    public MapPresenter (CompositeDisposable disposable) {        this.disposable = disposable;    }    @Override    public void checkLocationSettings () {       MainApp.getMapManger()              .checkLocationSettings()               .subscribe(new SingleObserver<Boolean>() {                   @Override                   public void onSubscribe (Disposable d) {                       disposable.add(d);                   }                   @Override                   public void onSuccess (Boolean aBoolean) {                       Log.d(TAG, "onSuccess: "+aBoolean);                             if(aBoolean){                                 view().initiateGoogleMap();                             }   else{                                  view().finishActivity();                             }                   }                   @Override                   public void onError (Throwable e) {                       e.printStackTrace();                   }               });    }    @Override    public void getLatestLocation (){        MainApp.getMapManger()                .getLatestLocation()                .subscribeWith(new Observer<Address>() {                    @Override                    public void onSubscribe (Disposable d) {                        disposable.add(d);                    }                    @Override                    public void onNext (Address address) {                        view().saveLocation(address);                    }                    @Override                    public void onError (Throwable e) {                        e.printStackTrace();                    }                    @Override                    public void onComplete () {                    }                });    }    LocationRequest createLocationRequest(){        LocationRequest locationRequest = LocationRequest.create()                .setPriority(LocationRequest.PRIORITY_HIGH_ACCURACY)                .setInterval(5000);        return locationRequest;    }}